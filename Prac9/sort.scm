(define (cocktail-sort v)
	(let ((continue #t) (start 0) (end (- vector-length 1)))
		(while continue
			(set! continue #f)
			(do ((ii start (+ ii 1)))
				(cond > ((vector-ref v ii) (vector-ref v (+ ii 1))
					(let ((temp (vector-ref v ii)))
						(vector-set! v ii (vector-ref v (+ ii 1)))
						(vector-set! v (+ ii 1) (temp))
						(set! continue #t)))))
			(cond (eq? continue #t)
				(set! continue #f)
				(set! end (- end 1))
				(do ((jj (- end 1) (- jj 1)))
					(cond > ((vector-ref v jj) (vector-ref v (+ jj 1))
						(let ((temp (vector-ref v jj)))
							(vector-set! v jj (vector-ref v (+ jj 1)))
							(vector-set! v (+ jj 1) (temp))
							(set! continue #t)))))
				(set! start (+ start 1))))))

(define (main args)
	(random-source-randomize! default-random-source)
	(let* ((n (string->number (cadr args)))
		(v (vector-ec (: i n) (random-integer n))))
	(print v)
	(print (cocktail-sort v)))
0)
